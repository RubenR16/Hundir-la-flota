-- drop database hundir_la_flota;

-- Crear base de datos
CREATE DATABASE hundir_la_flota;
USE hundir_la_flota;

-- Crear tabla de usuarios (con nombre_usuario como clave primaria)
CREATE TABLE usuarios (
  nombre_usuario VARCHAR(20) PRIMARY KEY,
  password_usuario VARCHAR(100) NOT NULL,
  partidas_jugadas INT DEFAULT 0,
  barcos_hundidos INT DEFAULT 0,
  puntos_totales INT DEFAULT 0,
  casillas_agua_golpeadas INT DEFAULT 0,
  baneado boolean default false
);

-- Crear tabla de ranking
-- CREATE TABLE ranking (
--   id BIGINT PRIMARY KEY AUTO_INCREMENT,
--   nombre_usuario VARCHAR(20) NOT NULL,
--   puntuacion INT DEFAULT 0,
--   UNIQUE KEY unique_nombre_usuario_ranking (nombre_usuario),
--   FOREIGN KEY (nombre_usuario) REFERENCES usuarios(nombre_usuario)
--     ON UPDATE CASCADE
--     ON DELETE CASCADE
-- );

-- Crear tabla de Baneados
create table Baneados (

	nombre_usuario VARCHAR(20),
    motivo varchar(255),
    fecha_baneo DATETIME DEFAULT CURRENT_TIMESTAMP,
    fecha_fin_baneo DATETIME,
    activo BOOLEAN DEFAULT TRUE,
    primary key(nombre_usuario,fecha_baneo),
    FOREIGN KEY (nombre_usuario) REFERENCES usuarios(nombre_usuario)
    ON UPDATE CASCADE ON DELETE CASCADE
);

-- Crear tabla de partidas
CREATE TABLE partidas (
  id_partida BIGINT PRIMARY KEY AUTO_INCREMENT,
  usuario_1 VARCHAR(20) NOT NULL,
  usuario_2 VARCHAR(20) NOT NULL,
  fecha_inicio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  fecha_fin TIMESTAMP NULL,
  ganador VARCHAR(20) NULL,
  FOREIGN KEY (usuario_1) REFERENCES usuarios(nombre_usuario)
    ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (usuario_2) REFERENCES usuarios(nombre_usuario)
    ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (ganador) REFERENCES usuarios(nombre_usuario)
    ON UPDATE CASCADE ON DELETE SET NULL
);

-- Consultas de prueba
SELECT * FROM usuarios;
SELECT * FROM Baneados;


DELIMITER //
CREATE TRIGGER trg_banear_usuario
AFTER UPDATE ON usuarios
FOR EACH ROW
BEGIN
  -- Solo si antes no estaba baneado y ahora sí lo está
  IF OLD.baneado = FALSE AND NEW.baneado = TRUE THEN
    INSERT INTO Baneados (nombre_usuario, motivo, fecha_baneo, fecha_fin_baneo)
    VALUES (NEW.nombre_usuario, 'Baneo manual desde admin', curdate(), DATE_ADD(curdate(), INTERVAL 7 DAY));
  END IF;
END //
DELIMITER ;





DELIMITER //

CREATE PROCEDURE levantar_baneos_expirados()
BEGIN
  -- Desactivar todos los baneos caducados
  UPDATE Baneados
  SET activo = FALSE
  WHERE activo = TRUE AND fecha_fin_baneo <= NOW();

  -- Actualizar usuarios.baneado = FALSE solo si ya no tienen baneos activos
  UPDATE usuarios
  SET baneado = FALSE
  WHERE nombre_usuario IN (
    SELECT nombre_usuario
    FROM Baneados
    GROUP BY nombre_usuario
    HAVING SUM(activo) = 0
  );
END //

DELIMITER ;




 -- drop trigger trg_banear_usuario;
-- drop PROCEDURE levantar_baneos_expirados;

UPDATE usuarios
SET
  baneado = true
WHERE nombre_usuario = 'r';
