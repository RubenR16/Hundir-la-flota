package com.proyecto.hundir_la_flota;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.io.IOException;
import java.util.List;
import javax.swing.*;
import javax.swing.border.EmptyBorder;

public class PartidaFrame extends JFrame {
    private JPanel contentPane;
    private JTextArea textArea;
    private JTextField textField;
    private JButton btnEnviar;
    private JLabel lblTurno;
    
    // Componentes del juego
    private TableroPanel tableroPropio;
    private TableroEnemigo tableroEnemigo;
    private LogicaPartida logicaJuego;
    
    // Red y comunicación
    private ServidorPartida servidor;
    private ClientePartida cliente;
    private boolean esServidor;
    private boolean miTurno;
    
    // Hilo para escuchar mensajes
    private Thread hiloEscucha;
    private boolean partidaActiva = true;
    private int ultimoDisparoFila = -1;
    private int ultimoDisparoColumna = -1;

    public PartidaFrame(List<Barco> barcosColocados, boolean esServidor, 
                       ServidorPartida servidor, ClientePartida cliente) {
        this.esServidor = esServidor;
        this.servidor = servidor;
        this.cliente = cliente;
        this.miTurno = esServidor; // El servidor empieza primero
        
        // Inicializar lógica del juego
        logicaJuego = new LogicaPartida(barcosColocados);
        
        inicializarInterfaz();
        mostrarBarcosEnTablero(barcosColocados);
        inicializarComunicacion();
        
        // Mostrar mensaje inicial
        agregarMensaje(esServidor ? "Eres el servidor. Tu turno para disparar." : 
                                  "Eres el cliente. Espera tu turno.");
    }

    private void inicializarInterfaz() {
        setTitle("Partida - Hundir la Flota");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(100, 100, 1000, 600);
        
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        contentPane.setLayout(new BorderLayout());
        setContentPane(contentPane);
        
        // Panel principal con los dos tableros
        JPanel panelTableros = new JPanel(new GridLayout(1, 2, 10, 0));
        
        // Panel izquierdo - Mi tablero
        JPanel panelIzquierdo = new JPanel(new BorderLayout());
        panelIzquierdo.setBorder(BorderFactory.createTitledBorder("Tu Campo"));
        tableroPropio = new TableroPanel();
        tableroPropio.deshabilitarColocacion(); // Deshabilitar colocación durante partida
        panelIzquierdo.add(tableroPropio, BorderLayout.CENTER);
        
        // Panel derecho - Tablero enemigo
        JPanel panelDerecho = new JPanel(new BorderLayout());
        lblTurno = new JLabel(miTurno ? "Campo Enemigo - TU TURNO" : "Campo Enemigo - ESPERA", JLabel.CENTER);
        lblTurno.setFont(new Font("Arial", Font.BOLD, 14));
        panelDerecho.add(lblTurno, BorderLayout.NORTH);
        tableroEnemigo = new TableroEnemigo(this);
        panelDerecho.add(tableroEnemigo, BorderLayout.CENTER);
        
        panelTableros.add(panelIzquierdo);
        panelTableros.add(panelDerecho);
        
        // Panel inferior para chat
        JPanel panelInferior = new JPanel(new BorderLayout());
        panelInferior.setBorder(BorderFactory.createTitledBorder("Chat"));
        
        // Área de mensajes
        textArea = new JTextArea(8, 50);
        textArea.setFont(new Font("Arial", Font.PLAIN, 12));
        textArea.setEditable(false);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        JScrollPane scrollPane = new JScrollPane(textArea);
        
        // Panel para escribir mensajes
        JPanel panelChat = new JPanel(new BorderLayout());
        textField = new JTextField();
        textField.addActionListener(e -> enviarMensajeChat());
        btnEnviar = new JButton("Enviar");
        btnEnviar.addActionListener(e -> enviarMensajeChat());
        
        panelChat.add(textField, BorderLayout.CENTER);
        panelChat.add(btnEnviar, BorderLayout.EAST);
        
        panelInferior.add(scrollPane, BorderLayout.CENTER);
        panelInferior.add(panelChat, BorderLayout.SOUTH);
        
        contentPane.add(panelTableros, BorderLayout.CENTER);
        contentPane.add(panelInferior, BorderLayout.SOUTH);
    }
    
    private void configurarTableroPropio(List<Barco> barcos) {
        // Mostrar los barcos en el tablero propio con sus colores originales
        Color[] coloresBarcos = {
            new Color(235, 152, 78),  // Barco de 5
            new Color(100, 255, 100), // Barco de 4
            new Color(100, 100, 255), // Barco de 3 (1)
            new Color(255, 255, 100), // Barco de 3 (2)
            new Color(255, 150, 255)  // Barco de 2
        };
        
        for (int i = 0; i < barcos.size(); i++) {
            Barco barco = barcos.get(i);
            Color colorBarco = coloresBarcos[i];
            
            // Colocar cada parte del barco en el tablero visual
            for (int j = 0; j < barco.tamaño; j++) {
                int fila = barco.filaInicial + (barco.horizontal ? 0 : j);
                int columna = barco.columnaInicial + (barco.horizontal ? j : 0);
                
                // Obtener la casilla del tablero y colocar el barco
                if (fila >= 0 && fila < 10 && columna >= 0 && columna < 10) {
                    // Acceder a las casillas del tablero propio para mostrar los barcos
                    tableroPropio.mostrarBarcoEnCasilla(fila, columna, colorBarco);
                }
            }
        }
    }
    
    private void inicializarComunicacion() {
        hiloEscucha = new Thread(() -> {
            try {
                String mensaje;
                while (partidaActiva && (mensaje = (esServidor ? servidor.getIn().readLine() : 
                                                              cliente.getIn().readLine())) != null) {
                    final String mensajeFinal = mensaje;
                    SwingUtilities.invokeLater(() -> procesarMensaje(mensajeFinal));
                }
            } catch (IOException e) {
                if (partidaActiva) {
                    SwingUtilities.invokeLater(() -> 
                        agregarMensaje("Error de conexión: " + e.getMessage()));
                }
            }
        });
        hiloEscucha.start();
    }
    
    // Método llamado desde TableroEnemigo cuando se hace clic
    public void realizarDisparo(int fila, int columna) {
        if (!miTurno) {
            agregarMensaje("¡No es tu turno!");
            return;
        }
        
        // Guardar coordenadas del último disparo
        ultimoDisparoFila = fila;
        ultimoDisparoColumna = columna;
        
        // Enviar disparo al oponente
        String mensaje = "DISPARO:" + fila + "," + columna;
        if (esServidor) {
            servidor.getOut().println(mensaje);
        } else {
            cliente.getOut().println(mensaje);
        }
        
        agregarMensaje("Disparaste a " + (char)('A' + fila) + (columna + 1));
        miTurno = false;
        actualizarEtiquetaTurno();
    }
    
    private void procesarMensaje(String mensaje) {
        if (mensaje.startsWith("DISPARO:")) {
            procesarDisparoRecibido(mensaje);
        } else if (mensaje.startsWith("RESULTADO:")) {
            procesarResultadoDisparo(mensaje);
        } else if (mensaje.startsWith("CHAT:")) {
            agregarMensaje("Oponente: " + mensaje.substring(5));
        } else if (mensaje.equals("VICTORIA")) {
            finalizarPartida(false);
        } else if (mensaje.equals("DERROTA")) {
            finalizarPartida(true);
        }
    }
    
    private void procesarDisparoRecibido(String mensaje) {
        // Formato: "DISPARO:fila,columna"
        String[] partes = mensaje.substring(8).split(",");
        int fila = Integer.parseInt(partes[0]);
        int columna = Integer.parseInt(partes[1]);
        
        boolean acierto = logicaJuego.recibirDisparo(fila, columna);
        
        // Actualizar nuestro tablero visual
        tableroPropio.marcarDisparoRecibido(fila, columna, acierto);
        
        // Verificar si se hundió un barco
        String resultado = "RESULTADO:" + (acierto ? "ACIERTO" : "AGUA");
        if (acierto) {
            Barco barcoTocado = logicaJuego.obtenerBarcoEn(fila, columna);
            if (barcoTocado != null && logicaJuego.verificarBarcoHundido(barcoTocado)) {
                resultado = "RESULTADO:HUNDIDO:" + barcoTocado.filaInicial + "," + 
                           barcoTocado.columnaInicial + "," + barcoTocado.tamaño + "," + barcoTocado.horizontal;
                agregarMensaje("¡Tu barco de tamaño " + barcoTocado.tamaño + " fue hundido!");
            } else {
                agregarMensaje("Te dieron en " + (char)('A' + fila) + (columna + 1));
            }
        } else {
            agregarMensaje("El enemigo falló en " + (char)('A' + fila) + (columna + 1));
        }
        
        // Enviar resultado
        if (esServidor) {
            servidor.getOut().println(resultado);
        } else {
            cliente.getOut().println(resultado);
        }
        
        // Verificar fin del juego
        if (logicaJuego.todosLosBarcosHundidos()) {
            if (esServidor) {
                servidor.getOut().println("VICTORIA");
            } else {
                cliente.getOut().println("VICTORIA");
            }
            finalizarPartida(false);
        } else {
            // Es nuestro turno después de recibir disparo
            miTurno = true;
            actualizarEtiquetaTurno();
        }
    }
    
    private void procesarResultadoDisparo(String mensaje) {
        // Formato: "RESULTADO:ACIERTO/AGUA/HUNDIDO:datos_barco"
        String[] partes = mensaje.substring(10).split(":");
        String resultado = partes[0];
        
        // Marcar el resultado en el tablero enemigo
        if (ultimoDisparoFila >= 0 && ultimoDisparoColumna >= 0) {
            if (resultado.equals("ACIERTO")) {
                tableroEnemigo.marcarDisparo(ultimoDisparoFila, ultimoDisparoColumna, true);
                agregarMensaje("¡Acierto! Puedes disparar de nuevo.");
                miTurno = true;
            } else if (resultado.equals("HUNDIDO")) {
                tableroEnemigo.marcarDisparo(ultimoDisparoFila, ultimoDisparoColumna, true);
                
                // Marcar todo el barco como hundido si tenemos los datos
                if (partes.length > 1) {
                    String[] datosBarco = partes[1].split(",");
                    int filaBarco = Integer.parseInt(datosBarco[0]);
                    int columnaBarco = Integer.parseInt(datosBarco[1]);
                    int tamañoBarco = Integer.parseInt(datosBarco[2]);
                    boolean horizontalBarco = Boolean.parseBoolean(datosBarco[3]);
                    
                    tableroEnemigo.marcarBarcoHundido(filaBarco, columnaBarco, tamañoBarco, horizontalBarco);
                }
                
                agregarMensaje("¡Barco hundido! Puedes disparar de nuevo.");
                miTurno = true;
            } else {
                tableroEnemigo.marcarDisparo(ultimoDisparoFila, ultimoDisparoColumna, false);
                agregarMensaje("Agua. Turno del oponente.");
                miTurno = false;
            }
        }
        
        actualizarEtiquetaTurno();
    }
    
    private void enviarMensajeChat() {
        String texto = textField.getText().trim();
        if (!texto.isEmpty()) {
            if (esServidor) {
                servidor.getOut().println("CHAT:" + texto);
            } else {
                cliente.getOut().println("CHAT:" + texto);
            }
            agregarMensaje("Tú: " + texto);
            textField.setText("");
        }
    }
    
    private void agregarMensaje(String mensaje) {
        textArea.append(mensaje + "\n");
        textArea.setCaretPosition(textArea.getDocument().getLength());
    }
    
    private void actualizarEtiquetaTurno() {
        lblTurno.setText(miTurno ? "Campo Enemigo - TU TURNO" : "Campo Enemigo - ESPERA");
    }
    
    private void finalizarPartida(boolean victoria) {
        partidaActiva = false;
        String mensaje = victoria ? "¡Has ganado la partida!" : "Has perdido la partida.";
        JOptionPane.showMessageDialog(this, mensaje, "Fin de partida", 
                                    victoria ? JOptionPane.INFORMATION_MESSAGE : 
                                             JOptionPane.WARNING_MESSAGE);
    }
    
    public boolean esMiTurno() {
        return miTurno;
    }
    
    // Método para mostrar barcos en el tablero propio al inicio de la partida
    private void mostrarBarcosEnTablero(List<Barco> barcos) {
        Color[] coloresBarcos = {
            new Color(235, 152, 78),  // Barco de 5
            new Color(100, 255, 100), // Barco de 4  
            new Color(100, 100, 255), // Barco de 3 (1)
            new Color(255, 255, 100), // Barco de 3 (2)
            new Color(255, 150, 255)  // Barco de 2
        };
        
        for (int i = 0; i < barcos.size(); i++) {
            Barco barco = barcos.get(i);
            Color colorBarco = coloresBarcos[i];
            
            for (int j = 0; j < barco.tamaño; j++) {
                int fila = barco.filaInicial + (barco.horizontal ? 0 : j);
                int columna = barco.columnaInicial + (barco.horizontal ? j : 0);
                
                if (fila >= 0 && fila < 10 && columna >= 0 && columna < 10) {
                    tableroPropio.mostrarBarcoEnCasilla(fila, columna, colorBarco);
                }
            }
        }
    }
    
    @Override
    public void dispose() {
        partidaActiva = false;
        if (hiloEscucha != null) {
            hiloEscucha.interrupt();
        }
        try {
            if (esServidor && servidor != null) {
                servidor.cerrar();
            } else if (cliente != null) {
                cliente.cerrar();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        super.dispose();
    }
}
